openapi: 3.0.3
info:
  title: ChronoBus API
  version: 1.0.0
  description: API per il sito ChronoBus

paths:
  /API/v1/reports:
    get:
      summary: Recupera tutti i report
      tags:
        - Reports
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Lista di tutti i report
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'

    post:
      summary: Crea un nuovo report
      tags:
        - Reports
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewReport'
      responses:
        '201':
          description: Report creato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Dati non validi
        '500':
          description: Errore del server

  /API/v1/reports/{id}:
    get:
      summary: Recupera un report per ID
      tags:
        - Reports
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Report trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        '404':
          description: Report non trovato
        '500':
          description: Errore del server

    delete:
      summary: Elimina un report per ID
      tags:
        - Reports
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Report eliminato con successo
        '404':
          description: Report non trovato
        '500':
          description: Errore del server
  /API/v1/users:
    post:
      summary: Registra un nuovo utente
      tags:
        - Authentication
      description: Registra un nuovo utente nel database MongoDB. Restituisce un token JWT se la registrazione va a buon fine.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  example: yourPassword123
      responses:
        "201":
          description: Registrazione avvenuta con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    description: JWT generato all’atto della registrazione
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  message:
                    type: string
                    example: Registrazione avvenuta con successo.
        "400":
          description: Parametri mancanti
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email e password sono obbligatorie.
        "409":
          description: Email già registrata
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email già registrata.
        "500":
          description: Errore interno del server
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Errore interno del server.
  /API/v1/session/login:
    post:
      summary: Login utente
      tags:
        - Authentication
      description: Autentica un utente con email e password. Restituisce il token JWT se il login va a buon fine.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  example: yourPassword123
      responses:
        "201":
          description: Login avvenuto con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    description: JWT generato all’atto del login
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  message:
                    type: string
                    example: Login avvenuto con successo.
        "400":
          description: Parametri mancanti
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email e password sono obbligatorie.
        "409":
          description: Email non trovata
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email non trovata
        "500":
          description: Errore interno del server
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Errore interno del server.

components:
  securitySchemes:
      BearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT
  schemas:
    NewReport:
      type: object
      properties:
        line:
          type: string
        time:
          type: integer
          description: UNIX timestamp (es. 1716285960)
        crowdedness:
          type: string
          enum: ['almost_empty', 'empty_seats', 'seats_full', 'crowded', 'overcrowded']
      required: [line, time, crowdedness]

    Report:
      allOf:
        - $ref: '#/components/schemas/NewReport'
        - type: object
          properties:
            _id:
              type: string
            __v:
              type: integer
          required: [_id]
